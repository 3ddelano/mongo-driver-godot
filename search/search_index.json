{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[ \\s\\-\\.]"},"docs":[{"location":"","text":"Welcome to Mongo Driver Godot Documentation \u00b6 Download Latest Zip Unofficial MongoDB driver for Godot Engine 3.3+ \u00b6 For in-depth docs visit the official MongoDB docs \u00b6 Quick Tips to Browse through the documentation \u00b6 Tables can be sorted by clicking the titles of the columns Press S or F or / to open the search bar The menu on the right can be used to quickly jump to sections","title":"Home"},{"location":"#welcome-to-mongo-driver-godot-documentation","text":"Download Latest Zip","title":"Welcome to Mongo Driver Godot Documentation"},{"location":"#unofficial-mongodb-driver-for-godot-engine-33","text":"","title":"Unofficial MongoDB driver for Godot Engine 3.3+"},{"location":"#for-in-depth-docs-visit-the-official-mongodb-docs","text":"","title":"For in-depth docs visit the official MongoDB docs"},{"location":"#quick-tips-to-browse-through-the-documentation","text":"Tables can be sorted by clicking the titles of the columns Press S or F or / to open the search bar The menu on the right can be used to quickly jump to sections","title":"Quick Tips to Browse through the documentation"},{"location":"building/","tags":["Building"],"text":"Following are the instructions to build the plugin from source. The plugin can be built for Windows, Linux and OSX. But due to certain circumstances its only released for Windows x64. Prerequisites \u00b6 Knowledge about building godot-cpp (See C++ example ) Required tools like python, scons, c++ compiler, etc. Windows \u00b6 Prerequisites \u00b6 Visual Studio 16 2019 Clone the repo \u00b6 Clone the Github repo git clone --recurse-submodules https://github.com/3ddelano/mongo-driver-godot.git Run setup \u00b6 Open a x64 Native Tools Command Prompt for Visual Studio 2019 and navigate to the extracted repo folder and run the command: setup.bat This will build the godot-cpp bindings and mongo-cxx-driver which are needed by the plugin. Build the plugin \u00b6 To build the plugin itself run the command: scons target=release platform=windows -j8 Run test project \u00b6 Open the project.godot file in the project/ folder using Godot to open the test project. Linux \u00b6 Contribute instructions. OSX \u00b6 Contribute instructions.","title":"Building"},{"location":"building/#prerequisites","text":"Knowledge about building godot-cpp (See C++ example ) Required tools like python, scons, c++ compiler, etc.","title":"Prerequisites"},{"location":"building/#windows","text":"","title":"Windows"},{"location":"building/#prerequisites_1","text":"Visual Studio 16 2019","title":"Prerequisites"},{"location":"building/#clone-the-repo","text":"Clone the Github repo git clone --recurse-submodules https://github.com/3ddelano/mongo-driver-godot.git","title":"Clone the repo"},{"location":"building/#run-setup","text":"Open a x64 Native Tools Command Prompt for Visual Studio 2019 and navigate to the extracted repo folder and run the command: setup.bat This will build the godot-cpp bindings and mongo-cxx-driver which are needed by the plugin.","title":"Run setup"},{"location":"building/#build-the-plugin","text":"To build the plugin itself run the command: scons target=release platform=windows -j8","title":"Build the plugin"},{"location":"building/#run-test-project","text":"Open the project.godot file in the project/ folder using Godot to open the test project.","title":"Run test project"},{"location":"building/#linux","text":"Contribute instructions.","title":"Linux"},{"location":"building/#osx","text":"Contribute instructions.","title":"OSX"},{"location":"examples/","tags":["Examples"],"text":"Some common examples are given below. For in-depth examples see the test cases in the project/tests/unit/ folder Dictionary Syntax A Dictionary in Godot can be specified using different equivalent syntax as follows: { \"key1\": \"value1\", \"key2\": [1, 2, 3], \"key3\": another_dictionary, \"key4\": \"value4\" } { key1 = value1, key2 = [1, 2, 3], key3 = another_dictionary, key4 = value4 } Working with a database \u00b6 base code var driver: MongoDriver = MongoDriver.new() var connection: MongoConnection = driver.connect_to_server(\"mongodb://localhost:27017\") var database: MongoDatabase = connection.get_database(\"test\") # Now you can use the database Running commands \u00b6 See more on commands here hello Command \u00b6 var res = database.run_command({ hello = 1 }) print(res) createUser Command \u00b6 print(database.run_command({ createUser = \"test_user1\", pwd = \"pass1234\", roles = [] }) Create specific collections \u00b6 Capped Collection \u00b6 print(database.create_collection(\"test\", { capped = true, size = 1000, })) Validated Collection \u00b6 # Ensure that the _id field is less than 100 in value print(database.create_collection(\"test\", { validator = { _id = Mongo.Lt(100) } })) Aggregation \u00b6 See more about aggregation here Example 1 \u00b6 This example shows aggregation pipeline on a collection that contains orders for products var database: MongoDatabase = connection.get_database(\"test\") var collection: MongoCollection = database.get_collection(\"test_col\") # Drop the collection if it exists collection.drop() # Insert test data collection.insert_many([ { _id = 0, productName = \"Steel beam\", status = \"new\", quantity = 10 }, { _id = 1, productName = \"Steel beam\", status = \"urgent\", quantity = 20 }, { _id = 2, productName = \"Steel beam\", status = \"urgent\", quantity = 30 }, { _id = 3, productName = \"Iron rod\", status = \"new\", quantity = 15 }, { _id = 4, productName = \"Iron rod\", status = \"urgent\", quantity = 50 }, { _id = 5, productName = \"Iron rod\", status = \"urgent\", quantity = 10 } ]) # Run the aggregation var result = database.run_command({ aggregate = \"test_col\", pipeline = [ # Stage 1: Filter documents on the status Mongo.Match({ status = \"urgent\" }), # Stage 2: Group remaining documents by # productName and calculate total quantity Mongo.Group({ _id = \"$productName\", sumQuantity = Mongo.Sum(\"$quantity\") }) ], cursor = {} })[\"cursor\"][\"firstBatch\"] print(result) Output [ { _id = \"Iron rod\", sumQuantity = 60 }, { _id = \"Steel beam\", sumQuantity = 50 } ] Example 2 \u00b6 This example shows aggregation pipeline on collection that contains pizza orders var database: MongoDatabase = connection.get_database(\"test\") var collection: MongoCollection = database.get_collection(\"test_col\") collection.drop() collection.insert_many([ { _id = 0, name = \"Pepperoni\", size = \"small\", price = 19, quantity = 10, date = Mongo.Date(\"2021-03-13T08:14:30Z\") }, { _id = 1, name = \"Pepperoni\", size = \"medium\", price = 20, quantity = 20, date = Mongo.Date(\"2021-03-13T09:13:24Z\") }, { _id = 2, name = \"Pepperoni\", size = \"large\", price = 21, quantity = 30, date = Mongo.Date(\"2021-03-17T09:22:12Z\") }, { _id = 3, name = \"Cheese\", size = \"small\", price = 12, quantity = 15, date = Mongo.Date(\"2021-03-13T11:21:39.736Z\") }, { _id = 4, name = \"Cheese\", size = \"medium\", price = 13, quantity = 50, date = Mongo.Date(\"2022-01-12T21:23:13.331Z\") }, { _id = 5, name = \"Cheese\", size = \"large\", price = 14, quantity = 10, date = Mongo.Date(\"2022-01-12T05:08:13Z\") }, { _id = 6, name = \"Vegan\", size = \"small\", price = 17, quantity = 10, date = Mongo.Date(\"2021-01-13T05:08:13Z\") }, { _id = 7, name = \"Vegan\", size = \"medium\", price = 18, quantity = 10, date = Mongo.Date(\"2021-01-13T05:10:13Z\") } ]) # Run the aggregation to Calculate Total Order # Value and Average Order Quantity var result = database.run_command({ aggregate = \"test_col\", pipeline = [ # Stage 1: Group documents by date and calculate results Mongo.Group({ _id = Mongo.DateToString({ format = \"%Y-%m-%d\", date = \"$date\" }), totalOrderValue = Mongo.Sum(Mongo.Multiply([\"$price\", \"$quantity\"])), averageOrderQuantity = Mongo.Avg(\"$quantity\") }), # Stage 2: Sort documents by totalOrderValue in descending order Mongo.Sort({ totalOrderValue = -1 }) ], cursor = {} })[\"cursor\"][\"firstBatch\"] print(result) Output [ { \"_id\": \"2022-01-12\", \"totalOrderValue\": 790, \"averageOrderQuantity\": 30 }, { \"_id\": \"2021-03-13\", \"totalOrderValue\": 770, \"averageOrderQuantity\": 15 }, { \"_id\": \"2021-03-17\", \"totalOrderValue\": 630, \"averageOrderQuantity\": 30 }, { \"_id\": \"2021-01-13\", \"totalOrderValue\": 350, \"averageOrderQuantity\": 10 } ]","title":"Examples"},{"location":"examples/#working-with-a-database","text":"base code var driver: MongoDriver = MongoDriver.new() var connection: MongoConnection = driver.connect_to_server(\"mongodb://localhost:27017\") var database: MongoDatabase = connection.get_database(\"test\") # Now you can use the database","title":"Working with a database"},{"location":"examples/#running-commands","text":"See more on commands here","title":"Running commands"},{"location":"examples/#hello-command","text":"var res = database.run_command({ hello = 1 }) print(res)","title":"hello Command"},{"location":"examples/#createuser-command","text":"print(database.run_command({ createUser = \"test_user1\", pwd = \"pass1234\", roles = [] })","title":"createUser Command"},{"location":"examples/#create-specific-collections","text":"","title":"Create specific collections"},{"location":"examples/#capped-collection","text":"print(database.create_collection(\"test\", { capped = true, size = 1000, }))","title":"Capped Collection"},{"location":"examples/#validated-collection","text":"# Ensure that the _id field is less than 100 in value print(database.create_collection(\"test\", { validator = { _id = Mongo.Lt(100) } }))","title":"Validated Collection"},{"location":"examples/#aggregation","text":"See more about aggregation here","title":"Aggregation"},{"location":"examples/#example-1","text":"This example shows aggregation pipeline on a collection that contains orders for products var database: MongoDatabase = connection.get_database(\"test\") var collection: MongoCollection = database.get_collection(\"test_col\") # Drop the collection if it exists collection.drop() # Insert test data collection.insert_many([ { _id = 0, productName = \"Steel beam\", status = \"new\", quantity = 10 }, { _id = 1, productName = \"Steel beam\", status = \"urgent\", quantity = 20 }, { _id = 2, productName = \"Steel beam\", status = \"urgent\", quantity = 30 }, { _id = 3, productName = \"Iron rod\", status = \"new\", quantity = 15 }, { _id = 4, productName = \"Iron rod\", status = \"urgent\", quantity = 50 }, { _id = 5, productName = \"Iron rod\", status = \"urgent\", quantity = 10 } ]) # Run the aggregation var result = database.run_command({ aggregate = \"test_col\", pipeline = [ # Stage 1: Filter documents on the status Mongo.Match({ status = \"urgent\" }), # Stage 2: Group remaining documents by # productName and calculate total quantity Mongo.Group({ _id = \"$productName\", sumQuantity = Mongo.Sum(\"$quantity\") }) ], cursor = {} })[\"cursor\"][\"firstBatch\"] print(result) Output [ { _id = \"Iron rod\", sumQuantity = 60 }, { _id = \"Steel beam\", sumQuantity = 50 } ]","title":"Example 1"},{"location":"examples/#example-2","text":"This example shows aggregation pipeline on collection that contains pizza orders var database: MongoDatabase = connection.get_database(\"test\") var collection: MongoCollection = database.get_collection(\"test_col\") collection.drop() collection.insert_many([ { _id = 0, name = \"Pepperoni\", size = \"small\", price = 19, quantity = 10, date = Mongo.Date(\"2021-03-13T08:14:30Z\") }, { _id = 1, name = \"Pepperoni\", size = \"medium\", price = 20, quantity = 20, date = Mongo.Date(\"2021-03-13T09:13:24Z\") }, { _id = 2, name = \"Pepperoni\", size = \"large\", price = 21, quantity = 30, date = Mongo.Date(\"2021-03-17T09:22:12Z\") }, { _id = 3, name = \"Cheese\", size = \"small\", price = 12, quantity = 15, date = Mongo.Date(\"2021-03-13T11:21:39.736Z\") }, { _id = 4, name = \"Cheese\", size = \"medium\", price = 13, quantity = 50, date = Mongo.Date(\"2022-01-12T21:23:13.331Z\") }, { _id = 5, name = \"Cheese\", size = \"large\", price = 14, quantity = 10, date = Mongo.Date(\"2022-01-12T05:08:13Z\") }, { _id = 6, name = \"Vegan\", size = \"small\", price = 17, quantity = 10, date = Mongo.Date(\"2021-01-13T05:08:13Z\") }, { _id = 7, name = \"Vegan\", size = \"medium\", price = 18, quantity = 10, date = Mongo.Date(\"2021-01-13T05:10:13Z\") } ]) # Run the aggregation to Calculate Total Order # Value and Average Order Quantity var result = database.run_command({ aggregate = \"test_col\", pipeline = [ # Stage 1: Group documents by date and calculate results Mongo.Group({ _id = Mongo.DateToString({ format = \"%Y-%m-%d\", date = \"$date\" }), totalOrderValue = Mongo.Sum(Mongo.Multiply([\"$price\", \"$quantity\"])), averageOrderQuantity = Mongo.Avg(\"$quantity\") }), # Stage 2: Sort documents by totalOrderValue in descending order Mongo.Sort({ totalOrderValue = -1 }) ], cursor = {} })[\"cursor\"][\"firstBatch\"] print(result) Output [ { \"_id\": \"2022-01-12\", \"totalOrderValue\": 790, \"averageOrderQuantity\": 30 }, { \"_id\": \"2021-03-13\", \"totalOrderValue\": 770, \"averageOrderQuantity\": 15 }, { \"_id\": \"2021-03-17\", \"totalOrderValue\": 630, \"averageOrderQuantity\": 30 }, { \"_id\": \"2021-01-13\", \"totalOrderValue\": 350, \"averageOrderQuantity\": 10 } ]","title":"Example 2"},{"location":"how-to-update/","tags":["Update"],"text":"How to update \u00b6 As of Godot 3, there is no automated way to update plugins in a clean method. As a workaround: Close the Godot project. Navigate to the addons folder of the project using the file explorer. Delete the addons/mongo-driver-godot folder from your project directory Follow the installation steps here to install the new version","title":"How to Update"},{"location":"how-to-update/#how-to-update","text":"As of Godot 3, there is no automated way to update plugins in a clean method. As a workaround: Close the Godot project. Navigate to the addons folder of the project using the file explorer. Delete the addons/mongo-driver-godot folder from your project directory Follow the installation steps here to install the new version","title":"How to update"},{"location":"installation/","tags":["Installation"],"text":"From Asset Library \u00b6 Coming soon. From Github \u00b6 Download the code \u00b6 Download the repo from the master or Releases section Add to project \u00b6 Copy the mongo-driver-godot folder from the addons folder from the downloaded zip to the addons folder in the directory of your Godot project. If your project does not already have a addons folder, make a new one. Your project folder should look something like this: There is NO need to enable the plugin in ProjectSettings. You might need to close and open the project for the GDNative classes to register. Minmal Example \u00b6 Use the following snippet to connect to a database: extends Control func _ready() -> void: var driver: MongoDriver = MongoDriver.new() var connection: MongoConnection = driver.connect_to_server(\"mongodb://localhost:27017\") print(connection.get_database_names())","title":"Installation"},{"location":"installation/#from-asset-library","text":"Coming soon.","title":"From Asset Library"},{"location":"installation/#from-github","text":"","title":"From Github"},{"location":"installation/#download-the-code","text":"Download the repo from the master or Releases section","title":"Download the code"},{"location":"installation/#add-to-project","text":"Copy the mongo-driver-godot folder from the addons folder from the downloaded zip to the addons folder in the directory of your Godot project. If your project does not already have a addons folder, make a new one. Your project folder should look something like this: There is NO need to enable the plugin in ProjectSettings. You might need to close and open the project for the GDNative classes to register.","title":"Add to project"},{"location":"installation/#minmal-example","text":"Use the following snippet to connect to a database: extends Control func _ready() -> void: var driver: MongoDriver = MongoDriver.new() var connection: MongoConnection = driver.connect_to_server(\"mongodb://localhost:27017\") print(connection.get_database_names())","title":"Minmal Example"},{"location":"testing/","tags":["Testing"],"text":"The plugin has a separate plugin for testing which is present in the addons/tester/ folder. Enable testing \u00b6 Enable the Mongo Godot Driver Tester addon in the Plugins section of ProjectSettings. This helper plugin supports 3 different testing modes: Single Script Single Folder Recursive Folders Configure \u00b6 Open the test.gd script in addons/tester/ folder and modify the variables: TESTS_PATH \u00b6 The path to a single script or folder to test TEST_FILE_PREFIX \u00b6 The prefix of the test file names TEST_FILE_SUFFIX \u00b6 The suffix of the test file names TEST_MODE \u00b6 The test mode to use Run tests \u00b6 From Editor \u00b6 Run the Test.tscn scene which is in the addons/tester/ folder. From Terminal \u00b6 Quicker method Simply run the run_tests.bat file in the scripts/ folder instead of the below method. To run the tester from terminal, ensure you have godot on the environment path variable and run the below command. Replace <PATH_TO_YOUR_GODOT_PROJECT> with the path to your Godot project. godot --no-window --path <PATH_TO_YOUR_GODOT_PROJECT> addons/tester/Test.tscn","title":"Testing"},{"location":"testing/#enable-testing","text":"Enable the Mongo Godot Driver Tester addon in the Plugins section of ProjectSettings. This helper plugin supports 3 different testing modes: Single Script Single Folder Recursive Folders","title":"Enable testing"},{"location":"testing/#configure","text":"Open the test.gd script in addons/tester/ folder and modify the variables:","title":"Configure"},{"location":"testing/#tests_path","text":"The path to a single script or folder to test","title":"TESTS_PATH"},{"location":"testing/#test_file_prefix","text":"The prefix of the test file names","title":"TEST_FILE_PREFIX"},{"location":"testing/#test_file_suffix","text":"The suffix of the test file names","title":"TEST_FILE_SUFFIX"},{"location":"testing/#test_mode","text":"The test mode to use","title":"TEST_MODE"},{"location":"testing/#run-tests","text":"","title":"Run tests"},{"location":"testing/#from-editor","text":"Run the Test.tscn scene which is in the addons/tester/ folder.","title":"From Editor"},{"location":"testing/#from-terminal","text":"Quicker method Simply run the run_tests.bat file in the scripts/ folder instead of the below method. To run the tester from terminal, ensure you have godot on the environment path variable and run the below command. Replace <PATH_TO_YOUR_GODOT_PROJECT> with the path to your Godot project. godot --no-window --path <PATH_TO_YOUR_GODOT_PROJECT> addons/tester/Test.tscn","title":"From Terminal"},{"location":"classes/Mongo/","tags":["Mongo","Class","Helper"],"text":"Mongo \u00b6 Extends: Reference Description \u00b6 Base class with helper functions for MongoDB Methods Sub-classes Method Descriptions \u00b6 is_error (static) \u00b6 func is_error ( obj ) ObjectId (static) \u00b6 func ObjectId ( id ) -> Dictionary Date (static) \u00b6 func Date ( date ) -> Dictionary Set (static) \u00b6 func Set ( dict ) -> Dictionary Cmp (static) \u00b6 func Cmp ( val ) -> Dictionary Eq (static) \u00b6 func Eq ( val ) -> Dictionary Lt (static) \u00b6 func Lt ( val ) -> Dictionary Lte (static) \u00b6 func Lte ( val ) -> Dictionary Gt (static) \u00b6 func Gt ( val ) -> Dictionary Gte (static) \u00b6 func Gte ( val ) -> Dictionary In (static) \u00b6 func In ( val ) -> Dictionary Nin (static) \u00b6 func Nin ( val ) -> Dictionary Ne (static) \u00b6 func Ne ( val ) -> Dictionary And (static) \u00b6 func And ( val ) -> Dictionary Or (static) \u00b6 func Or ( val ) -> Dictionary Not (static) \u00b6 func Not ( val ) -> Dictionary Nor (static) \u00b6 func Nor ( val ) -> Dictionary DateAdd (static) \u00b6 func DateAdd ( val ) DateDiff (static) \u00b6 func DateDiff ( val ) DateFromParts (static) \u00b6 func DateFromParts ( val ) DateFromString (static) \u00b6 func DateFromString ( val ) DateSubtract (static) \u00b6 func DateSubtract ( val ) DateToParts (static) \u00b6 func DateToParts ( val ) DateToString (static) \u00b6 func DateToString ( val ) DateTrunc (static) \u00b6 func DateTrunc ( val ) DayOfMonth (static) \u00b6 func DayOfMonth ( val ) DayOfWeek (static) \u00b6 func DayOfWeek ( val ) DayOfYear (static) \u00b6 func DayOfYear ( val ) Hour (static) \u00b6 func Hour ( val ) IsoDayOfWeek (static) \u00b6 func IsoDayOfWeek ( val ) IsoWeek (static) \u00b6 func IsoWeek ( val ) IsoWeekYear (static) \u00b6 func IsoWeekYear ( val ) Millisecond (static) \u00b6 func Millisecond ( val ) Minute (static) \u00b6 func Minute ( val ) Month (static) \u00b6 func Month ( val ) Second (static) \u00b6 func Second ( val ) ToDate (static) \u00b6 func ToDate ( val ) Subtract (static) \u00b6 func Subtract ( val ) CurrentDate (static) \u00b6 func CurrentDate ( val ) -> Dictionary Inc (static) \u00b6 func Inc ( val ) -> Dictionary Min (static) \u00b6 func Min ( val ) -> Dictionary Max (static) \u00b6 func Max ( val ) -> Dictionary Mul (static) \u00b6 func Mul ( val ) -> Dictionary Multiply (static) \u00b6 func Multiply ( val ) -> Dictionary Rename (static) \u00b6 func Rename ( val ) -> Dictionary SetOnInsert (static) \u00b6 func SetOnInsert ( val ) -> Dictionary All (static) \u00b6 func All ( val ) -> Dictionary ElemMatch (static) \u00b6 func ElemMatch ( val ) -> Dictionary Size (static) \u00b6 func Size ( val ) -> Dictionary AddToSet (static) \u00b6 func AddToSet ( val ) -> Dictionary Pop (static) \u00b6 func Pop ( val ) -> Dictionary Pull (static) \u00b6 func Pull ( val ) -> Dictionary Push (static) \u00b6 func Push ( val ) -> Dictionary PullAll (static) \u00b6 func PullAll ( val ) -> Dictionary ArrayElemAt (static) \u00b6 func ArrayElemAt ( val ) ArrayToObject (static) \u00b6 func ArrayToObject ( val ) ConcatArrays (static) \u00b6 func ConcatArrays ( val ) Filter (static) \u00b6 func Filter ( val ) First (static) \u00b6 func First ( val ) IndexOfArray (static) \u00b6 func IndexOfArray ( val ) IsArray (static) \u00b6 func IsArray ( val ) Last (static) \u00b6 func Last ( val ) Map (static) \u00b6 func Map ( val ) ObjectToArray (static) \u00b6 func ObjectToArray ( val ) Range (static) \u00b6 func Range ( val ) Reduce (static) \u00b6 func Reduce ( val ) ReverseArray (static) \u00b6 func ReverseArray ( val ) Slice (static) \u00b6 func Slice ( val ) Zip (static) \u00b6 func Zip ( val ) Each (static) \u00b6 func Each ( val ) -> Dictionary Position (static) \u00b6 func Position ( val ) -> Dictionary Sort (static) \u00b6 func Sort ( val ) -> Dictionary Exists (static) \u00b6 func Exists ( val ) -> Dictionary Type (static) \u00b6 func Type ( val ) -> Dictionary Expr (static) \u00b6 func Expr ( val ) -> Dictionary JsonSchema (static) \u00b6 func JsonSchema ( val ) -> Dictionary Regex (static) \u00b6 func Regex ( val , options : String = \"\" ) -> Dictionary Text (static) \u00b6 func Text ( val ) -> Dictionary Where (static) \u00b6 func Where ( val ) -> Dictionary Comment (static) \u00b6 func Comment ( val ) -> Dictionary Rand (static) \u00b6 func Rand ( val ) -> Dictionary GetField (static) \u00b6 func GetField ( val ) -> Dictionary SampleRate (static) \u00b6 func SampleRate ( val ) -> Dictionary Accumulator (static) \u00b6 func Accumulator ( val ) -> Dictionary Function (static) \u00b6 func Function ( val ) -> Dictionary MergeObjects (static) \u00b6 func MergeObjects ( val ) -> Dictionary SetField (static) \u00b6 func SetField ( val ) -> Dictionary Match (static) \u00b6 func Match ( val ) -> Dictionary Sum (static) \u00b6 func Sum ( val ) -> Dictionary Group (static) \u00b6 func Group ( val ) -> Dictionary Avg (static) \u00b6 func Avg ( val ) -> Dictionary Sub-classes \u00b6 FindOneAndReplaceOptions FindOptions","title":"Mongo"},{"location":"classes/Mongo/#mongo","text":"Extends: Reference","title":"Mongo"},{"location":"classes/Mongo/#description","text":"Base class with helper functions for MongoDB Methods Sub-classes","title":"Description"},{"location":"classes/Mongo/#method-descriptions","text":"","title":"Method Descriptions"},{"location":"classes/Mongo/#is_error-static","text":"func is_error ( obj )","title":"is_error (static)"},{"location":"classes/Mongo/#objectid-static","text":"func ObjectId ( id ) -> Dictionary","title":"ObjectId (static)"},{"location":"classes/Mongo/#date-static","text":"func Date ( date ) -> Dictionary","title":"Date (static)"},{"location":"classes/Mongo/#set-static","text":"func Set ( dict ) -> Dictionary","title":"Set (static)"},{"location":"classes/Mongo/#cmp-static","text":"func Cmp ( val ) -> Dictionary","title":"Cmp (static)"},{"location":"classes/Mongo/#eq-static","text":"func Eq ( val ) -> Dictionary","title":"Eq (static)"},{"location":"classes/Mongo/#lt-static","text":"func Lt ( val ) -> Dictionary","title":"Lt (static)"},{"location":"classes/Mongo/#lte-static","text":"func Lte ( val ) -> Dictionary","title":"Lte (static)"},{"location":"classes/Mongo/#gt-static","text":"func Gt ( val ) -> Dictionary","title":"Gt (static)"},{"location":"classes/Mongo/#gte-static","text":"func Gte ( val ) -> Dictionary","title":"Gte (static)"},{"location":"classes/Mongo/#in-static","text":"func In ( val ) -> Dictionary","title":"In (static)"},{"location":"classes/Mongo/#nin-static","text":"func Nin ( val ) -> Dictionary","title":"Nin (static)"},{"location":"classes/Mongo/#ne-static","text":"func Ne ( val ) -> Dictionary","title":"Ne (static)"},{"location":"classes/Mongo/#and-static","text":"func And ( val ) -> Dictionary","title":"And (static)"},{"location":"classes/Mongo/#or-static","text":"func Or ( val ) -> Dictionary","title":"Or (static)"},{"location":"classes/Mongo/#not-static","text":"func Not ( val ) -> Dictionary","title":"Not (static)"},{"location":"classes/Mongo/#nor-static","text":"func Nor ( val ) -> Dictionary","title":"Nor (static)"},{"location":"classes/Mongo/#dateadd-static","text":"func DateAdd ( val )","title":"DateAdd (static)"},{"location":"classes/Mongo/#datediff-static","text":"func DateDiff ( val )","title":"DateDiff (static)"},{"location":"classes/Mongo/#datefromparts-static","text":"func DateFromParts ( val )","title":"DateFromParts (static)"},{"location":"classes/Mongo/#datefromstring-static","text":"func DateFromString ( val )","title":"DateFromString (static)"},{"location":"classes/Mongo/#datesubtract-static","text":"func DateSubtract ( val )","title":"DateSubtract (static)"},{"location":"classes/Mongo/#datetoparts-static","text":"func DateToParts ( val )","title":"DateToParts (static)"},{"location":"classes/Mongo/#datetostring-static","text":"func DateToString ( val )","title":"DateToString (static)"},{"location":"classes/Mongo/#datetrunc-static","text":"func DateTrunc ( val )","title":"DateTrunc (static)"},{"location":"classes/Mongo/#dayofmonth-static","text":"func DayOfMonth ( val )","title":"DayOfMonth (static)"},{"location":"classes/Mongo/#dayofweek-static","text":"func DayOfWeek ( val )","title":"DayOfWeek (static)"},{"location":"classes/Mongo/#dayofyear-static","text":"func DayOfYear ( val )","title":"DayOfYear (static)"},{"location":"classes/Mongo/#hour-static","text":"func Hour ( val )","title":"Hour (static)"},{"location":"classes/Mongo/#isodayofweek-static","text":"func IsoDayOfWeek ( val )","title":"IsoDayOfWeek (static)"},{"location":"classes/Mongo/#isoweek-static","text":"func IsoWeek ( val )","title":"IsoWeek (static)"},{"location":"classes/Mongo/#isoweekyear-static","text":"func IsoWeekYear ( val )","title":"IsoWeekYear (static)"},{"location":"classes/Mongo/#millisecond-static","text":"func Millisecond ( val )","title":"Millisecond (static)"},{"location":"classes/Mongo/#minute-static","text":"func Minute ( val )","title":"Minute (static)"},{"location":"classes/Mongo/#month-static","text":"func Month ( val )","title":"Month (static)"},{"location":"classes/Mongo/#second-static","text":"func Second ( val )","title":"Second (static)"},{"location":"classes/Mongo/#todate-static","text":"func ToDate ( val )","title":"ToDate (static)"},{"location":"classes/Mongo/#subtract-static","text":"func Subtract ( val )","title":"Subtract (static)"},{"location":"classes/Mongo/#currentdate-static","text":"func CurrentDate ( val ) -> Dictionary","title":"CurrentDate (static)"},{"location":"classes/Mongo/#inc-static","text":"func Inc ( val ) -> Dictionary","title":"Inc (static)"},{"location":"classes/Mongo/#min-static","text":"func Min ( val ) -> Dictionary","title":"Min (static)"},{"location":"classes/Mongo/#max-static","text":"func Max ( val ) -> Dictionary","title":"Max (static)"},{"location":"classes/Mongo/#mul-static","text":"func Mul ( val ) -> Dictionary","title":"Mul (static)"},{"location":"classes/Mongo/#multiply-static","text":"func Multiply ( val ) -> Dictionary","title":"Multiply (static)"},{"location":"classes/Mongo/#rename-static","text":"func Rename ( val ) -> Dictionary","title":"Rename (static)"},{"location":"classes/Mongo/#setoninsert-static","text":"func SetOnInsert ( val ) -> Dictionary","title":"SetOnInsert (static)"},{"location":"classes/Mongo/#all-static","text":"func All ( val ) -> Dictionary","title":"All (static)"},{"location":"classes/Mongo/#elemmatch-static","text":"func ElemMatch ( val ) -> Dictionary","title":"ElemMatch (static)"},{"location":"classes/Mongo/#size-static","text":"func Size ( val ) -> Dictionary","title":"Size (static)"},{"location":"classes/Mongo/#addtoset-static","text":"func AddToSet ( val ) -> Dictionary","title":"AddToSet (static)"},{"location":"classes/Mongo/#pop-static","text":"func Pop ( val ) -> Dictionary","title":"Pop (static)"},{"location":"classes/Mongo/#pull-static","text":"func Pull ( val ) -> Dictionary","title":"Pull (static)"},{"location":"classes/Mongo/#push-static","text":"func Push ( val ) -> Dictionary","title":"Push (static)"},{"location":"classes/Mongo/#pullall-static","text":"func PullAll ( val ) -> Dictionary","title":"PullAll (static)"},{"location":"classes/Mongo/#arrayelemat-static","text":"func ArrayElemAt ( val )","title":"ArrayElemAt (static)"},{"location":"classes/Mongo/#arraytoobject-static","text":"func ArrayToObject ( val )","title":"ArrayToObject (static)"},{"location":"classes/Mongo/#concatarrays-static","text":"func ConcatArrays ( val )","title":"ConcatArrays (static)"},{"location":"classes/Mongo/#filter-static","text":"func Filter ( val )","title":"Filter (static)"},{"location":"classes/Mongo/#first-static","text":"func First ( val )","title":"First (static)"},{"location":"classes/Mongo/#indexofarray-static","text":"func IndexOfArray ( val )","title":"IndexOfArray (static)"},{"location":"classes/Mongo/#isarray-static","text":"func IsArray ( val )","title":"IsArray (static)"},{"location":"classes/Mongo/#last-static","text":"func Last ( val )","title":"Last (static)"},{"location":"classes/Mongo/#map-static","text":"func Map ( val )","title":"Map (static)"},{"location":"classes/Mongo/#objecttoarray-static","text":"func ObjectToArray ( val )","title":"ObjectToArray (static)"},{"location":"classes/Mongo/#range-static","text":"func Range ( val )","title":"Range (static)"},{"location":"classes/Mongo/#reduce-static","text":"func Reduce ( val )","title":"Reduce (static)"},{"location":"classes/Mongo/#reversearray-static","text":"func ReverseArray ( val )","title":"ReverseArray (static)"},{"location":"classes/Mongo/#slice-static","text":"func Slice ( val )","title":"Slice (static)"},{"location":"classes/Mongo/#zip-static","text":"func Zip ( val )","title":"Zip (static)"},{"location":"classes/Mongo/#each-static","text":"func Each ( val ) -> Dictionary","title":"Each (static)"},{"location":"classes/Mongo/#position-static","text":"func Position ( val ) -> Dictionary","title":"Position (static)"},{"location":"classes/Mongo/#sort-static","text":"func Sort ( val ) -> Dictionary","title":"Sort (static)"},{"location":"classes/Mongo/#exists-static","text":"func Exists ( val ) -> Dictionary","title":"Exists (static)"},{"location":"classes/Mongo/#type-static","text":"func Type ( val ) -> Dictionary","title":"Type (static)"},{"location":"classes/Mongo/#expr-static","text":"func Expr ( val ) -> Dictionary","title":"Expr (static)"},{"location":"classes/Mongo/#jsonschema-static","text":"func JsonSchema ( val ) -> Dictionary","title":"JsonSchema (static)"},{"location":"classes/Mongo/#regex-static","text":"func Regex ( val , options : String = \"\" ) -> Dictionary","title":"Regex (static)"},{"location":"classes/Mongo/#text-static","text":"func Text ( val ) -> Dictionary","title":"Text (static)"},{"location":"classes/Mongo/#where-static","text":"func Where ( val ) -> Dictionary","title":"Where (static)"},{"location":"classes/Mongo/#comment-static","text":"func Comment ( val ) -> Dictionary","title":"Comment (static)"},{"location":"classes/Mongo/#rand-static","text":"func Rand ( val ) -> Dictionary","title":"Rand (static)"},{"location":"classes/Mongo/#getfield-static","text":"func GetField ( val ) -> Dictionary","title":"GetField (static)"},{"location":"classes/Mongo/#samplerate-static","text":"func SampleRate ( val ) -> Dictionary","title":"SampleRate (static)"},{"location":"classes/Mongo/#accumulator-static","text":"func Accumulator ( val ) -> Dictionary","title":"Accumulator (static)"},{"location":"classes/Mongo/#function-static","text":"func Function ( val ) -> Dictionary","title":"Function (static)"},{"location":"classes/Mongo/#mergeobjects-static","text":"func MergeObjects ( val ) -> Dictionary","title":"MergeObjects (static)"},{"location":"classes/Mongo/#setfield-static","text":"func SetField ( val ) -> Dictionary","title":"SetField (static)"},{"location":"classes/Mongo/#match-static","text":"func Match ( val ) -> Dictionary","title":"Match (static)"},{"location":"classes/Mongo/#sum-static","text":"func Sum ( val ) -> Dictionary","title":"Sum (static)"},{"location":"classes/Mongo/#group-static","text":"func Group ( val ) -> Dictionary","title":"Group (static)"},{"location":"classes/Mongo/#avg-static","text":"func Avg ( val ) -> Dictionary","title":"Avg (static)"},{"location":"classes/Mongo/#sub-classes","text":"FindOneAndReplaceOptions FindOptions","title":"Sub-classes"},{"location":"classes/MongoCollection/","tags":["MongoCollection","Class"],"text":"MongoCollection \u00b6 Description \u00b6 Represents a server side document grouping within a MongoDB database. Methods Method Descriptions \u00b6 find \u00b6 func find ( filter : Dictionary , options : Dictionary ) Finds the documents in this collection which match the provided filter. Parameters filter : Dictionary representing a document that should match the query options : Optional arguments Returns: Array of documents or error Dictionary find_one \u00b6 func find_one ( filter : Dictionary , options : Dictionary ) Finds a single document in this collection that match the provided filter. Parameters filter : Dictionary representing a document that should match the query options : Optional arguments Returns: An optional document that matched the filter or error Dictionary find_one_and_delete \u00b6 func find_one_and_delete ( filter : Dictionary , options : Dictionary ) Finds a single document matching the filter, deletes it, and returns the original. Parameters filter : Dictionary representing a document that should be deleted options : Optional arguments Returns: The document that was deleted or error Dictionary find_one_and_replace \u00b6 func find_one_and_replace ( filter : Dictionary , doc : Dictionary , options : Dictionary ) Finds a single document matching the filter, replaces it, and returns either the original or the replacement document. Parameters filter : Dictionary representing a document that should be replaced doc : Dictionary representing the replacement for a matching document options : Optional arguments Returns: The original or replaced document or error Dictionary find_one_and_update \u00b6 func find_one_and_update ( filter : Dictionary , doc : Dictionary , options : Dictionary ) Finds a single document matching the filter, updates it, and returns either the original or the newly-updated document. Parameters filter : Dictionary representing a document that should be updated options : Optional arguments Returns: The original or updated document or error Dictionary insert_one \u00b6 func insert_one ( doc : Dictionary , options : Dictionary ) Inserts a single document into the collection. If the document is missing an identifier (_id field) one will be generated for it. Parameters doc : The document to insert options : Optional arguments Returns: The result of attempting to perform the insert or error Dictionary insert_many \u00b6 func insert_many ( docs : Array , options : Dictionary ) Inserts multiple documents into the collection. If the documents are missing identifiers then they will be generated for them. Parameters doc : Array of documents to insert options : Optional arguments Returns: The result of attempting to performing the insert or error Dictionary replace_one \u00b6 func replace_one ( filter : Dictionary , doc : Dictionary , options : Dictionary ) Replaces a single document matching the provided filter in this collection. Parameters filter : Document representing the match criteria doc : The replacement document options : Optional arguments Returns: The result of attempting to replace a document or error Dictionary update_one \u00b6 func update_one ( filter : Dictionary , doc_or_pipeline , options : Dictionary ) Updates a single document matching the provided filter in this collection. Parameters filter : Document representing the match criteria doc : Document representing the update to be applied to a matching document options : Optional arguments Returns: The result of attempting to update a document or error Dictionary update_many \u00b6 func update_many ( filter : Dictionary , doc_or_pipeline , options : Dictionary ) Updates multiple documents matching the provided filter in this collection. Parameters filter : Document representing the match criteria doc : Document representing the update to be applied to the matching documents options : Optional arguments Returns: The result of attempting to update multiple documents or error Dictionary delete_one \u00b6 func delete_one ( filter : Dictionary , options : Dictionary ) Deletes a single matching document from the collection. Parameters filter : Dictionary representing the data to be deleted options : Optional arguments Returns: The result of performing the deletion or error Dictionary delete_many \u00b6 func delete_many ( filter : Dictionary , options : Dictionary ) Deletes all matching documents from the collection. Parameters filter : Dictionary representing the data to be deleted options : Optional arguments Returns: The result of performing the deletion or error Dictionary rename \u00b6 func rename ( name : String , drop_target_before_rename = false ) Rename this collection. Parameters name : The new name to assign to the collection drop_target_before_rename : Whether to overwrite any existing collections called new_name. The default is false. Returns: True if success or error Dictionary get_name \u00b6 func get_name () Returns the name of this collection. Returns: The name of this collection drop \u00b6 func drop () Drops this collection and all its contained documents from the database. Returns: True if success or error Dictionary count_documents \u00b6 func count_documents ( filter : Dictionary , options ) Counts the number of documents matching the provided filter. Parameters filter : The filter that documents must match in order to be counted options : Optional arguments Returns: The count of the documents that matched the filter or error Dictionary estimated_document_count \u00b6 func estimated_document_count ( options : Dictionary ) Returns an estimate of the number of documents in the collection. Parameters options : Optional arguments Returns: The count of the documents that matched the filter or error Dictionary create_index \u00b6 func create_index ( index : Dictionary , options : Dictionary ) Creates an index over the collection for the provided keys with the provided options. Parameters index : Dictionary representing the 'keys' and 'options' of the new index options : Optional arguments Returns: Dictionary or error Dictionary get_indexes \u00b6 func get_indexes () Returns a MongoIndex for this collection Returns: MongoIndex for this collection or error Dictionary get_indexes_list \u00b6 func get_indexes_list () Returns a list of the indexes currently on this collection. Returns: Array of indexes or error Dictionary get_distinct \u00b6 func get_distinct ( name : String , filter : Dictionary , options : Dictionary ) Finds the distinct values for a specified field across the collection. Parameters name : The field for which the distinct values will be found filter : ictionary representing the documents for which the distinct operation will apply options : Optional arguments Returns: Array of the distinct values or error Dictionary","title":"MongoCollection"},{"location":"classes/MongoCollection/#mongocollection","text":"","title":"MongoCollection"},{"location":"classes/MongoCollection/#description","text":"Represents a server side document grouping within a MongoDB database. Methods","title":"Description"},{"location":"classes/MongoCollection/#method-descriptions","text":"","title":"Method Descriptions"},{"location":"classes/MongoCollection/#find","text":"func find ( filter : Dictionary , options : Dictionary ) Finds the documents in this collection which match the provided filter. Parameters filter : Dictionary representing a document that should match the query options : Optional arguments Returns: Array of documents or error Dictionary","title":"find"},{"location":"classes/MongoCollection/#find_one","text":"func find_one ( filter : Dictionary , options : Dictionary ) Finds a single document in this collection that match the provided filter. Parameters filter : Dictionary representing a document that should match the query options : Optional arguments Returns: An optional document that matched the filter or error Dictionary","title":"find_one"},{"location":"classes/MongoCollection/#find_one_and_delete","text":"func find_one_and_delete ( filter : Dictionary , options : Dictionary ) Finds a single document matching the filter, deletes it, and returns the original. Parameters filter : Dictionary representing a document that should be deleted options : Optional arguments Returns: The document that was deleted or error Dictionary","title":"find_one_and_delete"},{"location":"classes/MongoCollection/#find_one_and_replace","text":"func find_one_and_replace ( filter : Dictionary , doc : Dictionary , options : Dictionary ) Finds a single document matching the filter, replaces it, and returns either the original or the replacement document. Parameters filter : Dictionary representing a document that should be replaced doc : Dictionary representing the replacement for a matching document options : Optional arguments Returns: The original or replaced document or error Dictionary","title":"find_one_and_replace"},{"location":"classes/MongoCollection/#find_one_and_update","text":"func find_one_and_update ( filter : Dictionary , doc : Dictionary , options : Dictionary ) Finds a single document matching the filter, updates it, and returns either the original or the newly-updated document. Parameters filter : Dictionary representing a document that should be updated options : Optional arguments Returns: The original or updated document or error Dictionary","title":"find_one_and_update"},{"location":"classes/MongoCollection/#insert_one","text":"func insert_one ( doc : Dictionary , options : Dictionary ) Inserts a single document into the collection. If the document is missing an identifier (_id field) one will be generated for it. Parameters doc : The document to insert options : Optional arguments Returns: The result of attempting to perform the insert or error Dictionary","title":"insert_one"},{"location":"classes/MongoCollection/#insert_many","text":"func insert_many ( docs : Array , options : Dictionary ) Inserts multiple documents into the collection. If the documents are missing identifiers then they will be generated for them. Parameters doc : Array of documents to insert options : Optional arguments Returns: The result of attempting to performing the insert or error Dictionary","title":"insert_many"},{"location":"classes/MongoCollection/#replace_one","text":"func replace_one ( filter : Dictionary , doc : Dictionary , options : Dictionary ) Replaces a single document matching the provided filter in this collection. Parameters filter : Document representing the match criteria doc : The replacement document options : Optional arguments Returns: The result of attempting to replace a document or error Dictionary","title":"replace_one"},{"location":"classes/MongoCollection/#update_one","text":"func update_one ( filter : Dictionary , doc_or_pipeline , options : Dictionary ) Updates a single document matching the provided filter in this collection. Parameters filter : Document representing the match criteria doc : Document representing the update to be applied to a matching document options : Optional arguments Returns: The result of attempting to update a document or error Dictionary","title":"update_one"},{"location":"classes/MongoCollection/#update_many","text":"func update_many ( filter : Dictionary , doc_or_pipeline , options : Dictionary ) Updates multiple documents matching the provided filter in this collection. Parameters filter : Document representing the match criteria doc : Document representing the update to be applied to the matching documents options : Optional arguments Returns: The result of attempting to update multiple documents or error Dictionary","title":"update_many"},{"location":"classes/MongoCollection/#delete_one","text":"func delete_one ( filter : Dictionary , options : Dictionary ) Deletes a single matching document from the collection. Parameters filter : Dictionary representing the data to be deleted options : Optional arguments Returns: The result of performing the deletion or error Dictionary","title":"delete_one"},{"location":"classes/MongoCollection/#delete_many","text":"func delete_many ( filter : Dictionary , options : Dictionary ) Deletes all matching documents from the collection. Parameters filter : Dictionary representing the data to be deleted options : Optional arguments Returns: The result of performing the deletion or error Dictionary","title":"delete_many"},{"location":"classes/MongoCollection/#rename","text":"func rename ( name : String , drop_target_before_rename = false ) Rename this collection. Parameters name : The new name to assign to the collection drop_target_before_rename : Whether to overwrite any existing collections called new_name. The default is false. Returns: True if success or error Dictionary","title":"rename"},{"location":"classes/MongoCollection/#get_name","text":"func get_name () Returns the name of this collection. Returns: The name of this collection","title":"get_name"},{"location":"classes/MongoCollection/#drop","text":"func drop () Drops this collection and all its contained documents from the database. Returns: True if success or error Dictionary","title":"drop"},{"location":"classes/MongoCollection/#count_documents","text":"func count_documents ( filter : Dictionary , options ) Counts the number of documents matching the provided filter. Parameters filter : The filter that documents must match in order to be counted options : Optional arguments Returns: The count of the documents that matched the filter or error Dictionary","title":"count_documents"},{"location":"classes/MongoCollection/#estimated_document_count","text":"func estimated_document_count ( options : Dictionary ) Returns an estimate of the number of documents in the collection. Parameters options : Optional arguments Returns: The count of the documents that matched the filter or error Dictionary","title":"estimated_document_count"},{"location":"classes/MongoCollection/#create_index","text":"func create_index ( index : Dictionary , options : Dictionary ) Creates an index over the collection for the provided keys with the provided options. Parameters index : Dictionary representing the 'keys' and 'options' of the new index options : Optional arguments Returns: Dictionary or error Dictionary","title":"create_index"},{"location":"classes/MongoCollection/#get_indexes","text":"func get_indexes () Returns a MongoIndex for this collection Returns: MongoIndex for this collection or error Dictionary","title":"get_indexes"},{"location":"classes/MongoCollection/#get_indexes_list","text":"func get_indexes_list () Returns a list of the indexes currently on this collection. Returns: Array of indexes or error Dictionary","title":"get_indexes_list"},{"location":"classes/MongoCollection/#get_distinct","text":"func get_distinct ( name : String , filter : Dictionary , options : Dictionary ) Finds the distinct values for a specified field across the collection. Parameters name : The field for which the distinct values will be found filter : ictionary representing the documents for which the distinct operation will apply options : Optional arguments Returns: Array of the distinct values or error Dictionary","title":"get_distinct"},{"location":"classes/MongoConnection/","tags":["MongoConnection","Class"],"text":"MongoConnection \u00b6 Description \u00b6 Represents the indexes on a MongoDB collection. Methods Method Descriptions \u00b6 get_database_names \u00b6 func get_database_names ( filter : Dictionary ) Gets the names of the databases on the server. Parameters filter : Optional query expression to filter the returned database names Returns: Array of database names or error Dictionary get_database \u00b6 func get_database ( name ) Obtains a database thats represents a logical grouping of collections on a MongoDB server Parameters name : Name of the database to get Returns: The MongoGodotDatabase or error Dictionary","title":"MongoConnection"},{"location":"classes/MongoConnection/#mongoconnection","text":"","title":"MongoConnection"},{"location":"classes/MongoConnection/#description","text":"Represents the indexes on a MongoDB collection. Methods","title":"Description"},{"location":"classes/MongoConnection/#method-descriptions","text":"","title":"Method Descriptions"},{"location":"classes/MongoConnection/#get_database_names","text":"func get_database_names ( filter : Dictionary ) Gets the names of the databases on the server. Parameters filter : Optional query expression to filter the returned database names Returns: Array of database names or error Dictionary","title":"get_database_names"},{"location":"classes/MongoConnection/#get_database","text":"func get_database ( name ) Obtains a database thats represents a logical grouping of collections on a MongoDB server Parameters name : Name of the database to get Returns: The MongoGodotDatabase or error Dictionary","title":"get_database"},{"location":"classes/MongoDatabase/","tags":["MongoDatabase","Class"],"text":"MongoDatabase \u00b6 Description \u00b6 Represents a server-side grouping of collections. Methods Method Descriptions \u00b6 get_collection_names \u00b6 func get_collection_names ( filter : Dictionary ) Gets the names of the collections in this database. Parameters filter : Optional query expression to filter the returned collection names. Returns: Array of collection names or error Dictionary get_collection \u00b6 func get_collection ( name : String ) Obtains a collection which represents a logical grouping of documents within this database. Parameters name : Name of the collection to get Returns: The MongoCollection or error Dictionary create_collection \u00b6 func create_collection ( name : String , options : Dictionary ) Explicitly creates a collection in this database with the specified options. Parameters name : Name of the new collection options : Optional options for the new collection Returns: The newly created MongoCollection or error Dictionary run_command \u00b6 func run_command ( command : Dictionary ) Runs a command against this database. Parameters command : Dictionary representing the command to be run Returns: Result Dictionary or error Dictionary drop \u00b6 func drop () Drops the database and all its collections. Returns: True or error Dictionary","title":"MongoDatabase"},{"location":"classes/MongoDatabase/#mongodatabase","text":"","title":"MongoDatabase"},{"location":"classes/MongoDatabase/#description","text":"Represents a server-side grouping of collections. Methods","title":"Description"},{"location":"classes/MongoDatabase/#method-descriptions","text":"","title":"Method Descriptions"},{"location":"classes/MongoDatabase/#get_collection_names","text":"func get_collection_names ( filter : Dictionary ) Gets the names of the collections in this database. Parameters filter : Optional query expression to filter the returned collection names. Returns: Array of collection names or error Dictionary","title":"get_collection_names"},{"location":"classes/MongoDatabase/#get_collection","text":"func get_collection ( name : String ) Obtains a collection which represents a logical grouping of documents within this database. Parameters name : Name of the collection to get Returns: The MongoCollection or error Dictionary","title":"get_collection"},{"location":"classes/MongoDatabase/#create_collection","text":"func create_collection ( name : String , options : Dictionary ) Explicitly creates a collection in this database with the specified options. Parameters name : Name of the new collection options : Optional options for the new collection Returns: The newly created MongoCollection or error Dictionary","title":"create_collection"},{"location":"classes/MongoDatabase/#run_command","text":"func run_command ( command : Dictionary ) Runs a command against this database. Parameters command : Dictionary representing the command to be run Returns: Result Dictionary or error Dictionary","title":"run_command"},{"location":"classes/MongoDatabase/#drop","text":"func drop () Drops the database and all its collections. Returns: True or error Dictionary","title":"drop"},{"location":"classes/MongoDriver/","tags":["MongoDriver","Class"],"text":"MongoDriver \u00b6 Description \u00b6 Handles making connections to a MongoDB server. Methods Method Descriptions \u00b6 connect_to_server \u00b6 func connect_to_server ( uri : String ) Attempts to create a client connection to a MongoDB server. Parameters uri : A MongoDB URI representing the connection parameters Returns: MongoConnection | error Dictionary","title":"MongoDriver"},{"location":"classes/MongoDriver/#mongodriver","text":"","title":"MongoDriver"},{"location":"classes/MongoDriver/#description","text":"Handles making connections to a MongoDB server. Methods","title":"Description"},{"location":"classes/MongoDriver/#method-descriptions","text":"","title":"Method Descriptions"},{"location":"classes/MongoDriver/#connect_to_server","text":"func connect_to_server ( uri : String ) Attempts to create a client connection to a MongoDB server. Parameters uri : A MongoDB URI representing the connection parameters Returns: MongoConnection | error Dictionary","title":"connect_to_server"},{"location":"classes/MongoIndex/","text":"MongoIndex \u00b6 Description \u00b6 Represents the indexes on a MongoDB collection. Methods Method Descriptions \u00b6 list \u00b6 func list () Returns all the indexes. Returns: Array of indexes or error Dictionary create_one \u00b6 func create_one ( index : Dictionary , options : Dictionary ) Creates an index. Parameters index : Dictionary representing the 'keys' and 'options' of the new index options : Optional arguments Returns: The result document or error Dictionary create_many \u00b6 func create_many ( indexes : Array , options : Dictionary ) Creates mulitple indexes. Parameters indexes : Array of Dictionary representing the 'keys' and 'options' of the new indexes options : Optional arguments Returns: The result document or error Dictionary drop_one \u00b6 func drop_one ( name_or_index , options : Dictionary ) Attempts to drop a single index from the collection its the keys and options. Parameters name_or_index : Either a String representing the index name or a Dictionary representing the keys and options of the index to drop options : Optional arguments Returns: True or error Dictionary drop_all \u00b6 func drop_all ( options : Dictionary ) Drops all indexes in the collection. Parameters options : Optional arguments Returns: True or error Dictionary","title":"MongoIndex"},{"location":"classes/MongoIndex/#mongoindex","text":"","title":"MongoIndex"},{"location":"classes/MongoIndex/#description","text":"Represents the indexes on a MongoDB collection. Methods","title":"Description"},{"location":"classes/MongoIndex/#method-descriptions","text":"","title":"Method Descriptions"},{"location":"classes/MongoIndex/#list","text":"func list () Returns all the indexes. Returns: Array of indexes or error Dictionary","title":"list"},{"location":"classes/MongoIndex/#create_one","text":"func create_one ( index : Dictionary , options : Dictionary ) Creates an index. Parameters index : Dictionary representing the 'keys' and 'options' of the new index options : Optional arguments Returns: The result document or error Dictionary","title":"create_one"},{"location":"classes/MongoIndex/#create_many","text":"func create_many ( indexes : Array , options : Dictionary ) Creates mulitple indexes. Parameters indexes : Array of Dictionary representing the 'keys' and 'options' of the new indexes options : Optional arguments Returns: The result document or error Dictionary","title":"create_many"},{"location":"classes/MongoIndex/#drop_one","text":"func drop_one ( name_or_index , options : Dictionary ) Attempts to drop a single index from the collection its the keys and options. Parameters name_or_index : Either a String representing the index name or a Dictionary representing the keys and options of the index to drop options : Optional arguments Returns: True or error Dictionary","title":"drop_one"},{"location":"classes/MongoIndex/#drop_all","text":"func drop_all ( options : Dictionary ) Drops all indexes in the collection. Parameters options : Optional arguments Returns: True or error Dictionary","title":"drop_all"},{"location":"classes/Mongo/sub_classes/FindOneAndReplaceOptions/","text":"FindOneAndReplaceOptions \u00b6 Description \u00b6 Options provided to find_one_and_replace method Enumerations Enumerations \u00b6 ReturnDocument \u00b6 enum ReturnDocument { \"BEFORE\" : 0 , \"AFTER\" : 1 } Version of document to return, either original or replaced.","title":"FindOneAndReplaceOptions"},{"location":"classes/Mongo/sub_classes/FindOneAndReplaceOptions/#findoneandreplaceoptions","text":"","title":"FindOneAndReplaceOptions"},{"location":"classes/Mongo/sub_classes/FindOneAndReplaceOptions/#description","text":"Options provided to find_one_and_replace method Enumerations","title":"Description"},{"location":"classes/Mongo/sub_classes/FindOneAndReplaceOptions/#enumerations","text":"","title":"Enumerations"},{"location":"classes/Mongo/sub_classes/FindOneAndReplaceOptions/#returndocument","text":"enum ReturnDocument { \"BEFORE\" : 0 , \"AFTER\" : 1 } Version of document to return, either original or replaced.","title":"ReturnDocument"},{"location":"classes/Mongo/sub_classes/FindOptions/","text":"FindOptions \u00b6 Description \u00b6 Options provided to find method Enumerations Enumerations \u00b6 CursorType \u00b6 enum CursorType { \"NON_TAILABLE\" : 0 , \"TAILABLE\" : 1 , \"TAILABLE_AWAIT\" : 2 } Indicates the type of cursor to use for this query.","title":"FindOptions"},{"location":"classes/Mongo/sub_classes/FindOptions/#findoptions","text":"","title":"FindOptions"},{"location":"classes/Mongo/sub_classes/FindOptions/#description","text":"Options provided to find method Enumerations","title":"Description"},{"location":"classes/Mongo/sub_classes/FindOptions/#enumerations","text":"","title":"Enumerations"},{"location":"classes/Mongo/sub_classes/FindOptions/#cursortype","text":"enum CursorType { \"NON_TAILABLE\" : 0 , \"TAILABLE\" : 1 , \"TAILABLE_AWAIT\" : 2 } Indicates the type of cursor to use for this query.","title":"CursorType"}]}