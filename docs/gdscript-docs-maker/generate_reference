#!/usr/bin/env sh

project_directory="$1"
output_directory="export"
directories_override=""
format="markdown"
author="developer"

echo_help() {
	cat <<'EOT'
    Generate a code reference from GDScript
    Usage:
    generate_reference $project_directory [options]

    Required arguments:

    $project_directory -- path to your Godot project directory.
    This directory or one of its subdirectories should contain a
    project.godot file.

    Options:

    -h/--help             -- Display this help message.
    -o/--output-directory -- directory path to output the documentation into.
    -d/--directory        -- Name of a directory to find files and generate the code reference in the Godot project.
                             You can use the option multiple times to generate a reference for multiple directories.
    -f/--format           -- Either `markdown` or `hugo`. If `hugo`, the output document includes a TOML front-matter
                             at the top. Default: `markdown`.
    -a/--author           -- If --format is `hugo`, controls the author property in the TOML front-matter.


    Usage example:

    generate_reference ~/Repositories/other/nakama-godot/project/ -o export-nakama -d addons

    This command walks files in the res://addons directory of the Godot Nakama project, and converts it
    to markdown files output in ./export-nakama.
EOT
	exit 0
}

# Interpret arguments

arguments=$(getopt --name "generate_reference" -o "h,o:,d:,f:,a:" -l "help,output-directory:,directories:" -- "$@")

eval set -- "$arguments"
while true; do
	case "$1" in
	-h | --help)
    echo_help
		shift
		;;
	-o | --output-directory)
		output_directory=$2
		shift 2
		;;
	-d | --directory)
		directories_override="$directories_override $2"
		shift 2
		;;
	-f | --format)
		format=$2
		shift 2
		;;
	-a | --author)
		author=$2
		shift 2
		;;
	--)
		shift
		break
		;;
	*)
		echo "Missing arguments. Try 'generate_reference --help' for more information"
		exit 1
		;;
	esac
done

echo "Checking parameters"

if test -z "$project_directory"; then
	echo "Missing first parameter: project_directory."
	exit 1
fi

if ! test -d "$project_directory"; then
	echo "Directory $project_directory does not exist, exiting."
	exit 1
fi

godot_project_file=$(find "$project_directory" -iname project.godot -print -quit)
if ! test -f "$godot_project_file"; then
	echo "Could not find a project.godot file in $project_directory. This program needs a Godot project to work."
	exit 1
fi



godot_project_dir=$(dirname "$godot_project_file")

path_ref_collector="godot-scripts/ReferenceCollectorCLI.gd"
path_collector="godot-scripts/Collector.gd"

# Override the content of the directories variable in ReferenceCollectorCLI.gd if we got --directory arguments
file_ref_collector=$(mktemp)
cat $path_ref_collector > "$file_ref_collector"
if test "$directories_override" != ""; then
  echo "Setting directories"
	args=$(echo "$directories_override" | sed -r 's#([-/._a-zA-Z0-9]+)#"res://\1",#g' | sed -r 's/,$//')
	sed -ri "s#^var directories.+#var directories := [$args]#" "$file_ref_collector"
fi

echo "Copying collectors to project directory"

cp "$file_ref_collector" "$godot_project_dir/$(basename $path_ref_collector)" >/dev/null
cp $path_collector "$godot_project_dir" >/dev/null

echo "Generating reference json data..."

ERROR_LOG=$(mktemp)

if ! godot --editor --quit --no-window --script ReferenceCollectorCLI.gd \
  --path "$godot_project_dir" 2>"$ERROR_LOG" >/dev/null
then
  ERRORS=$(cat "$ERROR_LOG")
  cat <<EOT
There was an error running 'godot'.
The program 'godot' must be available on the system '\$PATH' variable for this program to work.
For more information, see https://en.wikipedia.org/wiki/PATH_(variable).

This was the error log:

$ERRORS
EOT
  rm "$ERROR_LOG"
  exit 1
fi

echo "Done."

if ! [ -f "$godot_project_dir/reference.json" ]
then
	echo "There was an error generating the reference from Godot. The file $godot_project_dir/reference.json was not found."
	exit 1
fi

echo "Generating markdown files in $output_directory"

if [ ! -d "$output_directory" ]
then
   mkdir -v "$output_directory" >/dev/null
fi

if ! python3 -m gdscript_docs_maker "$godot_project_dir/reference.json" --path "$output_directory" --format "$format" \
  --author "$author" 2>"$ERROR_LOG"
then
  echo "Error running gdscript_docs_maker. This is the log:"
  cat "$ERROR_LOG"
  exit 1
fi

echo "Cleaning up..."
rm "$ERROR_LOG" >/dev/null
rm "$godot_project_dir/$(basename $path_ref_collector)" >/dev/null
rm "$godot_project_dir/$(basename $path_collector)" >/dev/null
rm "$godot_project_dir/reference.json" >/dev/null

exit 0
